{"version":3,"sources":["components/firebase/FirebaseConnection.js","components/authentication/SignIn.js","components/StatisticsValues.js","components/Formatter.js","components/firebase/FirebaseTasks.js","components/Statistics.js","components/timers/StopwatchView.js","components/timers/TimerView.js","components/FastButtonMenu.js","components/Priority.js","components/CreateTask.js","components/RecordTimeForTask.js","components/Layout.js","components/firebase/FirebaseUsers.js","components/authentication/SignUp.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","SignIn","useState","password","setPassword","email","setEmail","rules","fn","match","message","length","Container","htmlFor","FormControl","value","onChange","e","target","id","type","Button","className","onClick","props","failures","filter","r","forEach","alert","FirebaseConnection","auth","signInWithEmailAndPassword","then","localStorage","set","history","push","catch","variant","href","statisticsValues","today","thisWeek","thisMonth","Formatter","date1","date2","hours","Math","floor","minutes","time","split","now","Date","getFullYear","getMonth","getDate","time1","time2","this","getDateFromHours","task","name","plannedFrom","plannedTill","date","getHours","getMinutes","db","firestore","collectionName","formatter","FirebaseTasks","priority","user","collection","doc","editTime","pause","error","queryShot","list","data","getItem","docIds","docs","docId","workTime","update","delete","conditionValue","getFromUser","stats","index","saveIndex","planned","subtractTimeInHours","convertFrom","from","toMillis","convertTill","till","returnCondition","worked","toDateString","currMonday","setDate","getDay","firebaseTasks","Statistics","setData","selectedStat","setSelectedStat","useEffect","get","getStatsFromTask","console","log","ButtonGroup","map","active","Table","responsive","convertTime","rhours","round","StopwatchView","stopwatch","duration","setDuration","onTime","ms","millisToDuration","millis","seconds","TimerView","timer","startValue","Alert","isNaN","Stopwatch","require","FastButtonMenu","values","tasks","setTasks","setIndex","setWorkTime","isActive","setIsActive","activateStopwatch","ind","start","window","location","reload","newWorkTime","activeTask","updateTask","getDocIdsFromUser","showTask","prioritiy","high","normal","low","format","firebaseCon","CreateTask","setName","setPriority","setFrom","setTill","Boolean","InputGroup","Prepend","Text","calculateDifferenceDates","colorPalette","onTimeChange","hour","minute","phrases","confirm","cancel","close","pharese","Row","DropdownButton","title","Dropdown","Item","onSelect","Priority","create","RecordTimeForTask","workingTime","setWorkingTime","setPause","isOnBreak","setIsOnBreak","worktime","pauses","stop","reset","disabled","formatDate","Layout","component","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","Link","FirebaseUsers","firstname","lastname","query","SignUp","setFirstname","setLastname","confirmPwd","Form","placeholder","createUserWithEmailAndPassword","setItem","Loading","onAuthStateChanged","cleanup","Spinner","animation","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b262d04.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n/**\r\n * erstellt eine Verbindung zu der firestore Datenbank und initialiert dies auch.\r\n * Diese Konfiguration muss nur einmal in diesem Code programmiert werden\r\n *\r\n * @type {{storageBucket: string, apiKey: string, messagingSenderId: string, appId: string, projectId: string, measurementId: string, authDomain: string}}\r\n * @author Kimberly Moorhouse kdkdkdk\r\n */\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB-FtRRuqWMdiV5iDHiZKfxDNQI5o64qAI\",\r\n    authDomain: \"semeru-52985.firebaseapp.com\",\r\n    projectId: \"semeru-52985\",\r\n    storageBucket: \"semeru-52985.appspot.com\",\r\n    messagingSenderId: \"1090112397950\",\r\n    appId: \"1:1090112397950:web:5c5937829ee10694802e2f\",\r\n    measurementId: \"G-FPBQ133JL7\"\r\n};\r\n\r\nexport default firebase.initializeApp(firebaseConfig);","import {Button, Container, FormControl} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport FirebaseConnection from \"../firebase/FirebaseConnection\";\r\n\r\n/**\r\n * Hier kann sich der Benutzer anmelden\r\n * Dazu muss der Benutzer ein gültiges Konto haben und falls dieses nicht vorhanden ist, kann er sich über den\r\n * Link registrieren.\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function SignIn() {\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const rules = [\r\n        {fn: () => email.match(/.+@.+\\..+/), message: \"Es wurde keine gültige E-Mail-Adresse angegeben\"},\r\n        {fn: () => password.length > 6, message: \"Ihres Passwort muss mindestens 6 Zeichen enthalten\"}\r\n    ]\r\n\r\n    /**\r\n     * Hier werden die Daten validiert und es wird kontrolliert, ob dieser User auf die Datenbank zugreifen kann\r\n     * @param props\r\n     */\r\n    function handleSubmit(props) {\r\n        const failures = rules.filter(r => !r.fn());\r\n\r\n        if (failures.length) {\r\n            failures.forEach(r => alert(r.message));\r\n            return;\r\n        }\r\n\r\n        FirebaseConnection.auth()\r\n            .signInWithEmailAndPassword(email, password)\r\n            .then(() => {\r\n                localStorage.set('email', email);\r\n                props.history.push('schnellmenu')\r\n            })\r\n            .catch(() => alert(\"Ihre E-Mail Adresse stimmt nicht überein mit dem Passwort.\"));\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <br/>\r\n            <h2>Anmeldung</h2>\r\n            <br/>\r\n\r\n            <label htmlFor=\"email\">E-Mail Adresse: </label>\r\n            <FormControl value={email} onChange={e => setEmail(e.target.value)} id={\"email\"}/>\r\n            <br/>\r\n\r\n            <label htmlFor=\"password\">Passwort: </label>\r\n            <FormControl value={password} onChange={e => setPassword(e.target.value)} type={\"password\"}\r\n                         id={\"password\"}/>\r\n            <br/><br/>\r\n\r\n\r\n            <Button className=\"col-8\" onClick={handleSubmit} variant=\"secondary\">Anmelden</Button><br/><br/>\r\n            <a href=\"/registrieren\">Kein Konto? Melden Sie sich hier an!</a>\r\n        </Container>\r\n    )\r\n}","/**\r\n * Ein Enum, damit der Typ von der Statistik nicht verschrieben wird und dass diese auch nur die gültigen anzeigt.\r\n *\r\n * @type {{today: string, thisWeek: string, thisMonth: string}}\r\n * @author Kimberly Moorhouse\r\n */\r\nconst statisticsValues = {\r\n    today: 'Heute',\r\n    thisWeek: 'Diese Woche',\r\n    thisMonth: 'Dieser Monat'\r\n}\r\n\r\nexport default statisticsValues;","/**\r\n * Hier werden die Daten formatiert.\r\n * Je nachdem, was gebraucht wird, kann dies benutzt werden\r\n *\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default class Formatter {\r\n\r\n    /**\r\n     * bekommt zwei Daten und berechnet die Differenz zwischen den zwei Daten\r\n     * Diese werden formatiert zurückbekommen.\r\n     *\r\n     * @param date1\r\n     * @param date2\r\n     * @returns {string} formatiert nach: 09:02\r\n     */\r\n    calculateDifferenceDates(date1, date2) {\r\n        let hours = Math.floor(((date1 - date2) % 86400000) / 3600000);\r\n        let minutes = Math.floor((((date1 - date2) % 86400000) % 3600000) / 60000);\r\n        return ((hours < 10) ? \"0\" : \"\") + hours + \":\" + ((minutes < 10) ? \"0\" : \"\") + minutes;\r\n    }\r\n\r\n    /**\r\n     * Formatiert eine Uhrzeit als String zu einem Datum\r\n     * @param time z. B. 10:50\r\n     * @returns {Date}\r\n     */\r\n    getDateFromHours(time) {\r\n        time = time.split(':');\r\n        let now = new Date();\r\n        return new Date(now.getFullYear(), now.getMonth(), now.getDate(), ...time);\r\n    }\r\n\r\n    /**\r\n     * berechnet den Unterschied zwischen zwei Uhrzeiten und gibt die Anzahl Stunden zurück\r\n     *\r\n     * @param time1 z. B. 10:50, String\r\n     * @param time2 z. B. 10:50, String\r\n     * @returns {number}\r\n     */\r\n    subtractTimeInHours(time1, time2) {\r\n        time1 = this.getDateFromHours(time1);\r\n        time2 = this.getDateFromHours(time2);\r\n\r\n        return ((time1 - time2) % 86400000) / 3600000;\r\n    }\r\n\r\n    showTask(task) {\r\n        return task.name + \" \" + task.plannedFrom + \"-\" + task.plannedTill;\r\n    }\r\n\r\n    /**\r\n     * gibt die Uhrzeit formatiert zurück (10:50)\r\n     * @param date\r\n     * @returns {string}\r\n     */\r\n    formatDate(date) {\r\n        return ((date.getHours() < 10) ? \"0\" : \"\") + date.getHours() + \":\" + ((date.getMinutes() < 10) ? \"0\" : \"\") + date.getMinutes();\r\n    }\r\n}","import firebase from \"firebase\";\r\nimport statisticsValues from \"../StatisticsValues\";\r\nimport Formatter from \"../Formatter\";\r\n\r\nlet db = firebase.firestore();\r\nconst collectionName = \"tasks\";\r\nconst formatter = new Formatter();\r\n\r\n/**\r\n * Diese Klasse greift auf die Collection tasks zu.\r\n * Hier werden die CRUD Methoden implementiert und können von den Komponenten aufgerufen und benutzt werden.\r\n *\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default class FirebaseTasks {\r\n\r\n    /**\r\n     * erstellt eine neue Tätigkeit mit den nötigen Attributen\r\n     *\r\n     * @param name\r\n     * @param plannedFrom\r\n     * @param plannedTill\r\n     * @param priority\r\n     * @param user E-Mail Adresse von dem Benutzer.\r\n     */\r\n    create(name, plannedFrom, plannedTill, priority, user) {\r\n        db.collection(collectionName).doc().set({\r\n            name: name,\r\n            plannedFrom: plannedFrom,\r\n            plannedTill: plannedTill,\r\n            editTime: [],\r\n            pause: [],\r\n            priority: priority,\r\n            user: user\r\n\r\n        }).catch(error => alert(\"Ein Fehler ist aufgetreten: \" + error))\r\n    }\r\n\r\n    /**\r\n     * muss noch bearbeitet werden, vielleicht mit einem Filter?\r\n     *\r\n     * @param queryShot\r\n     * @returns {*[]}\r\n     */\r\n    getFromUser(queryShot) {\r\n        let list = [];\r\n\r\n        queryShot.forEach(doc => {\r\n            if (doc.data().user === localStorage.getItem('email')) list.push(doc.data())\r\n        });\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * beschafft sich die DocIDs der verschiedenen Tätigkeiten\r\n     * beim getFromUser werden NUR die DATEN der Tätigkeiten beschaffen und nicht die IDs!\r\n     *\r\n     * @param queryShot\r\n     * @returns {*[]}\r\n     */\r\n    getDocIdsFromUser(queryShot) {\r\n        let docIds = [];\r\n\r\n        queryShot.docs.forEach(doc => {\r\n            if (doc.data().user === localStorage.getItem('email')) docIds.push(doc.id)\r\n        });\r\n        return docIds;\r\n    }\r\n\r\n    /**\r\n     * Die Tätigkeit wird aktualisiert, mit den nötigen Werte\r\n     * alle Werte werden angegeben!\r\n     *\r\n     * @param docId\r\n     * @param task\r\n     * @param workTime\r\n     * @param pause\r\n     */\r\n    updateTask(docId, task, workTime, pause) {\r\n        db.collection(collectionName).doc(docId).update({\r\n            name: task.name,\r\n            plannedFrom: task.plannedFrom,\r\n            plannedTill: task.plannedTill,\r\n            editTime: workTime,\r\n            pause: pause,\r\n            priority: task.priority,\r\n            user: task.user\r\n\r\n        }).catch(error => alert(\"Ein Fehler ist aufgetreten: \" + error))\r\n    }\r\n\r\n    deleteATask(docId) {\r\n        db.collection(collectionName).doc(docId).delete().then(() => alert(\"Ihr Eintrag wurde erfolgreich gelöscht.\"))\r\n    }\r\n\r\n    /**\r\n     * beschafft die Daten für die Statistiken, die Zeiten werden hier berechnet und auch zurückgegeben\r\n     * Die Zeiten sind in Stunden berechnet und müssen in den Komponenten formatiert werden.\r\n     * NOCH IN BEARBEITUNG!!!!\r\n     *\r\n     * @param queryShot\r\n     * @param conditionValue: StatisticsValues\r\n     * @returns {*[]}: {name: '', worked: 0, pause: 0, planned: 0}\r\n     */\r\n    getStatsFromTask(queryShot, conditionValue) {\r\n        let data = this.getFromUser(queryShot);\r\n        let stats = [];\r\n\r\n\r\n        data.forEach((task, index) => {\r\n            let saveIndex = -1;\r\n            let workTime = 0;\r\n            let planned = formatter.subtractTimeInHours(task.plannedTill, task.plannedFrom)\r\n            let pause = 0;\r\n\r\n            task.editTime.forEach(time => {\r\n                const convertFrom = new Date(time.from.toMillis());\r\n                const convertTill = new Date(time.till.toMillis());\r\n\r\n                //sobald die Bedingung stimmt, wird die Zeit hinzugefügt.\r\n                if (returnCondition(conditionValue, convertTill, convertFrom)) {\r\n                    saveIndex = index\r\n                    workTime += ((convertTill - convertFrom) % 86400000) / 3600000;\r\n                }\r\n            });\r\n\r\n            task.pause.forEach(time => {\r\n                const convertFrom = new Date(time.from.toMillis());\r\n                const convertTill = new Date(time.till.toMillis());\r\n\r\n                //sobald die Bedingung stimmt, wird die Zeit hinzugefügt.\r\n                if (returnCondition(conditionValue, convertTill, convertFrom)) pause += ((convertTill - convertFrom) % 86400000) / 3600000;\r\n            })\r\n\r\n            if (saveIndex === index) stats.push({\r\n                name: data[index].name,\r\n                worked: workTime,\r\n                planned: planned,\r\n                pause: pause\r\n            })\r\n        })\r\n        return stats;\r\n    }\r\n}\r\n\r\n/**\r\n * Sobald die ConditionValue übereinstimmt, mit der Bedindung gibt dieser eine neue Bedingung zurück\r\n * zu dem richtigen Statistiktyp.\r\n *\r\n * @param conditionValue\r\n * @param till\r\n * @param from\r\n * @returns {boolean}\r\n */\r\nfunction returnCondition(conditionValue, till, from) {\r\n    const today = new Date().toDateString();\r\n    const currMonday = new Date(new Date().setDate(new Date().getDate() - new Date().getDay() + 1)).toDateString();\r\n\r\n    switch (conditionValue) {\r\n        case statisticsValues.today:\r\n            return from.toDateString() === today || till.toDateString() === today;\r\n        case statisticsValues.thisWeek:\r\n            return from.toDateString() >= currMonday || from.toDateString() <= today;\r\n        case statisticsValues.thisMonth:\r\n            return from.getMonth() === new Date().getMonth() || till.getMonth() === new Date().getMonth()\r\n        default:\r\n            return false;\r\n    }\r\n}","import {useEffect, useState} from \"react\";\r\nimport firebase from \"firebase\";\r\nimport {Button, ButtonGroup, Container, Table} from \"react-bootstrap\";\r\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\r\nimport statisticsValues from \"./StatisticsValues\";\r\n\r\nlet db = firebase.firestore();\r\nconst firebaseTasks = new FirebaseTasks();\r\n\r\n/**\r\n *\r\n * NOCH IN BEARBEITUNG:\r\n * Formatierung der Anzahl Stunden und noch vor diese Woche muss noch implementiert werden\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function Statistics() {\r\n    const [data, setData] = useState([]);\r\n    const [selectedStat, setSelectedStat] = useState(statisticsValues.today);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"tasks\").get().then(queryShot => {\r\n            setData(firebaseTasks.getStatsFromTask(queryShot, selectedStat))\r\n            console.log(firebaseTasks.getStatsFromTask(queryShot, selectedStat))\r\n        });\r\n    }, [selectedStat]);\r\n\r\n    return (\r\n        <Container className=\"col-12 col-lg-8\">\r\n            <h3>Ihre Statistiken</h3>\r\n            <br/>\r\n\r\n            <ButtonGroup className=\"me-2\">\r\n                {[statisticsValues.today, statisticsValues.thisWeek, statisticsValues.thisMonth]\r\n                    .map(((value, index) =>\r\n                        <Button key={'stats-' + index} onClick={() => setSelectedStat(value)}\r\n                                variant=\"outline-secondary\" active={value === selectedStat}>\r\n                            {value}</Button>))}\r\n            </ButtonGroup>\r\n            <br/><br/>\r\n\r\n            <Table responsive variant=\"light\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Tätigkeit</th>\r\n                    <th>Arbeitszeit</th>\r\n                    <th>Pause</th>\r\n                </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                {data.map(((value, index) =>\r\n                    <tr key={'statistics-' + index}>\r\n                        <td>{value.name}</td>\r\n                        <td>{convertTime(value.worked)}</td>\r\n                        <td>{convertTime(value.pause)}</td>\r\n                    </tr>))}\r\n                </tbody>\r\n            </Table>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction convertTime(hours) {\r\n    const rhours = Math.floor(hours);\r\n    const minutes = (hours - rhours) * 60;\r\n    const rminutes = Math.round(minutes);\r\n    return rhours + \" h \" + rminutes + \" min\";\r\n}","import {useState} from \"react\";\r\n\r\n/**\r\n * Hier wird die Stoppuhr implementiert und wird momentan in zwei Komponenten gebraucht.\r\n * Die Formatierung muss noch erledigt werden!!\r\n *\r\n * @param stopwatch die Stoppuhr wird mitgegeben, damit im Parent diese an- oder ausschalten kann\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function StopwatchView({stopwatch}) {\r\n    const [duration, setDuration] = useState(0);\r\n    stopwatch.onTime(time => setDuration(time.ms));\r\n\r\n    return (\r\n        <div>\r\n            <h5>\r\n                {millisToDuration(duration)}\r\n            </h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction millisToDuration(millis) {\r\n    let hours = Math.floor(millis / 3600000 % 24);\r\n    let minutes = Math.floor(millis / 60000 % 60);\r\n    let seconds = Math.floor(millis / 1000 % 60);\r\n\r\n    hours = ((hours < 10) ? '0' : '') + hours;\r\n    minutes = ((minutes < 10) ? '0' : '') + minutes;\r\n    seconds = ((seconds < 10) ? '0' : '') + seconds;\r\n\r\n    return hours + ':' + minutes + ':' + seconds\r\n}","import {Alert} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\n\r\n/**\r\n * erstellt einen Countdown-timer und sobald die Zeit vorbei ist wird eine Meldung angezeigt.\r\n * Das graphische Aussehen ist noch in Bearbeitung\r\n *\r\n * @param timer\r\n * @param startValue Zeit in Millisekunden\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function TimerView({timer, startValue}) {\r\n    const [duration, setDuration] = useState();\r\n    timer.onTime(time => setDuration(startValue - time.ms));\r\n\r\n    return (\r\n        <div>\r\n            <Alert variant='warning'>\r\n                <h4>{(duration === 0) ? 'Ihre eingeplante Zeit ist vorbei ' : millisToDuration(duration)}</h4>\r\n            </Alert>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * formatiert die Millisekunden in Stunden, Minuten und Sekunden.\r\n * Falls diese nicht berechnet werden können, gibt es 00:00:00 zurück.\r\n *\r\n * @param millis\r\n * @returns {string}\r\n */\r\nfunction millisToDuration(millis) {\r\n    let hours = Math.floor(millis / 3600000 % 24);\r\n    let minutes = Math.floor(millis / 60000 % 60);\r\n    let seconds = Math.floor(millis / 1000 % 60);\r\n\r\n    hours = ((hours < 10) ? '0' : '') + hours;\r\n    minutes = ((minutes < 10) ? '0' : '') + minutes;\r\n    seconds = ((seconds < 10) ? '0' : '') + seconds;\r\n\r\n    if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) return '00:00:00';\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n}","import {useEffect, useState} from \"react\";\r\nimport firebase from \"firebase\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\r\nimport Formatter from \"./Formatter\";\r\nimport StopwatchView from \"./timers/StopwatchView\";\r\nimport TimerView from \"./timers/TimerView\";\r\n\r\n//wird gebracht für den Timer und Stoppuhr\r\nlet Stopwatch = require('timer-stopwatch')\r\nlet stopwatch = new Stopwatch();\r\nlet timer = new Stopwatch();\r\n\r\nlet db = firebase.firestore();\r\nconst firebaseTasks = new FirebaseTasks();\r\nconst formatter = new Formatter();\r\n\r\n/**\r\n * Hier kann der Benutzer schnell seine Arbeitszeiten erfassen mit nur einem Klick.\r\n * Sobald er auf den Knopf drückt, werden die Arbeitszeiten aufgenommen.\r\n * Pausen wurden nicht implementiert, sowie auch nicht Unterbrechungen.\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function FastButtonMenu() {\r\n    const [tasks, setTasks] = useState({values: [], docIds: []});\r\n    const [index, setIndex] = useState(-1);\r\n    const [workTime, setWorkTime] = useState({from: new Date(), till: new Date()});\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    /**\r\n     * beschafft die Tätigkeiten des Benutzers aus der Datenbank, dabei werden auch die DocIDs gespeichert.\r\n     */\r\n    useEffect(() => {\r\n        db.collection(\"tasks\").get().then(queryShot => {\r\n            setTasks({docIds: firebaseTasks.getDocIdsFromUser(queryShot), values: firebaseTasks.getFromUser(queryShot)})\r\n        });\r\n    }, [])\r\n\r\n    /**\r\n     * startet oder stoppt die Stoppuhr und erfasst diese Daten in die Datenbank.\r\n     * @param ind\r\n     */\r\n    function activateStopwatch(ind) {\r\n        setIndex(ind);\r\n        setIsActive(!isActive);\r\n\r\n        setWorkTime({from: workTime.from, till: new Date()});\r\n        stopwatch.start();\r\n        timer.start();\r\n\r\n        if (ind === index) setIndex(-1);\r\n\r\n        if (isActive) {\r\n            setWorkTime({from: new Date(), till: new Date()});\r\n            //akutalisiert alle Daten auf ihre Standartwerte und beschafft neue Daten\r\n            window.location.reload()\r\n        }\r\n\r\n        update(ind);\r\n    }\r\n\r\n    /**\r\n     * aktualisiert die Daten in der Datenbank.\r\n     * Die Daten die verändert wurden, sind die Arbeitszeiten.\r\n     * @param ind\r\n     */\r\n    function update(ind) {\r\n        let newWorkTime = [workTime];\r\n        const activeTask = tasks.values[ind];\r\n\r\n        if (activeTask.editTime.length > 0) newWorkTime = [...activeTask.editTime, workTime];\r\n\r\n        firebaseTasks.updateTask(tasks.docIds[ind], activeTask, newWorkTime, activeTask.pause);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Schnell Menu</h3>\r\n            <h4>{(index < 0) ? '' : tasks.values[index].name}</h4>\r\n            <br/>\r\n\r\n            <h6>berechnete Zeit: </h6>\r\n            <StopwatchView stopwatch={stopwatch}/>\r\n\r\n            <br/>\r\n            <h6>verfügbare Zeit:</h6>\r\n            <TimerView\r\n                startValue={(index < 0) ? 0 : formatter.getDateFromHours(tasks.values[index].plannedTill) - formatter.getDateFromHours(tasks.values[index].plannedFrom)}\r\n                timer={timer}/>\r\n            <br/>\r\n            <hr/>\r\n\r\n            {tasks.values.map(((value, ind) =>\r\n                <div key={'tasks' + ind}>\r\n                    <Button onClick={() => activateStopwatch(ind)} className=\"col-8\" active={ind === index}\r\n                            variant=\"outline-secondary\">\r\n                        {formatter.showTask(value)}\r\n                    </Button><br/><br/>\r\n                </div>))}\r\n\r\n        </div>\r\n    )\r\n}","/**\r\n * Ist ein Enum für die Priorität, damit werden Tippfehler verringert.\r\n *\r\n * @type {{normal: string, high: string, low: string}}\r\n * @author Kimberly Moorhouse\r\n */\r\nconst prioritiy = {\r\n    high: 'hoch',\r\n    normal: 'normal',\r\n    low: 'tief'\r\n}\r\n\r\nexport default prioritiy;","import {Container, DropdownButton, Dropdown, FormControl, Button, InputGroup, Row, Alert} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport TimePicker from 'react-times';\r\nimport 'react-times/css/material/default.css';\r\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\r\nimport Formatter from \"./Formatter\";\r\nimport Priority from \"./Priority\";\r\n\r\nconst format = new Formatter();\r\nconst firebaseCon = new FirebaseTasks();\r\n\r\n/**\r\n * Auf der Website kann hier eine neue Tätigkeit hinzugefügt werden.\r\n * Der User wird mitgegeben über den Localstorage\r\n * Natürlich werden die Daten validiert und geben eine Fehlermeldung aus.\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function CreateTask() {\r\n    const [name, setName] = useState('');\r\n    const [priority, setPriority] = useState('');\r\n    const [from, setFrom] = useState('');\r\n    const [till, setTill] = useState('');\r\n\r\n    const rules = [\r\n        {fn: () => name.length < 31, message: \"Die Tätigkeit muss max. 30 Buchstaben enthalten\"},\r\n        {fn: () => Boolean(priority), message: \"Sie müssen eine Priorität setzen\"},\r\n        {fn: () => Boolean(from), message: \"Sie müssen eine Startzeit setzen\"},\r\n        {fn: () => Boolean(till), message: \"Sie müssen eine Endzeit setzen\"},\r\n        {fn: () => name.length > 2, message: \"Die Tätigkeit muss mind. 3 Buchstaben enthalten\"}\r\n    ];\r\n\r\n    /**\r\n     * kontrolliert, ob die Daten stimmen. Falls diese stimmen werden diese in die Firestore Datenbank gespeichert und\r\n     * die Werte werden aktuallisiert.\r\n     * Falls diese nicht stimmen, bekommt der User eine Fehlermeldung, bei dem was nicht stimme\r\n     */\r\n    function handleSubmit() {\r\n        const failures = rules.filter(r => !r.fn());\r\n\r\n        if (failures.length) {\r\n            failures.forEach(r => alert(r.message));\r\n            return;\r\n        }\r\n\r\n        //erstellt eine neue Tätigkeit\r\n        firebaseCon.create(name, from, till, priority, localStorage.getItem('email'));\r\n\r\n        setName('');\r\n        setFrom('');\r\n        setTill('');\r\n        setPriority('');\r\n    }\r\n\r\n    return (\r\n        <Container className=\"col-10 col-lg-8\">\r\n            <h3>Tätigkeit erfassen</h3>\r\n            <br/>\r\n\r\n            <InputGroup>\r\n                <InputGroup.Prepend className={\"col-4 col-lg-3\"}>\r\n                    <InputGroup.Text>Tätigkeit</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl value={name} onChange={e => setName(e.target.value)} id={\"name\"}/>\r\n            </InputGroup>\r\n            <br/>\r\n\r\n            <hr/>\r\n            <h5>{(Boolean(from) && Boolean(till)) ? \"dauer: \" +\r\n                format.calculateDifferenceDates(format.getDateFromHours(till), format.getDateFromHours(from)) : ''}</h5>\r\n\r\n            <Alert variant=\"warning\">\r\n                <label>Von: </label>\r\n                <TimePicker colorPalette=\"dark\" onTimeChange={time => setFrom(time.hour + \":\" + time.minute)}\r\n                            time={from}\r\n                            phrases={{confirm: 'Sind Sie sicher?', cancel: 'abbrechen?', close: 'schliessen'}}/>\r\n\r\n                <br/><br/>\r\n                <label>Bis: </label>\r\n                <TimePicker colorPalette=\"dark\" onTimeChange={time => setTill(time.hour + \":\" + time.minute)}\r\n                            time={till}\r\n                            pharese={{confirm: 'Sind Sie sicher?', cancel: 'abbrechen?', close: 'schliessen'}}/>\r\n            </Alert>\r\n\r\n            <hr/>\r\n            <br/>\r\n\r\n            <Row>\r\n                <label className=\"col-4 col-lg-3 offset-lg-2\">Priorität: </label>\r\n                <DropdownButton id=\"dropdown-basic-button\" className=\"col-3\" variant=\"light\"\r\n                                title={(Boolean(priority)) ? priority : 'Bitte etwas auswählen'}>\r\n                    <Dropdown.Item onSelect={() => setPriority(Priority.high)}>hoch</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setPriority(Priority.normal)}>normal</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setPriority(Priority.low)}>niedrig</Dropdown.Item>\r\n                </DropdownButton>\r\n            </Row>\r\n\r\n            <br/><br/>\r\n            <Button onClick={handleSubmit} className=\"col-5\" variant=\"secondary\">speichern</Button>\r\n        </Container>\r\n    )\r\n}","import {useEffect, useState} from \"react\";\r\nimport {Button, Container, Dropdown, DropdownButton} from \"react-bootstrap\";\r\nimport firebase from \"firebase\";\r\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\r\nimport Formatter from \"./Formatter\";\r\nimport StopwatchView from \"./timers/StopwatchView\";\r\nimport TimerView from \"./timers/TimerView\";\r\n\r\n\r\n//werden für den Timer und auch für die Stoppuhr gebraucht.\r\nlet Stopwatch = require('timer-stopwatch')\r\nlet stopwatch = new Stopwatch();\r\nlet timer = new Stopwatch();\r\n\r\nlet db = firebase.firestore();\r\nconst firebaseTasks = new FirebaseTasks();\r\nconst formatter = new Formatter();\r\n\r\n/**\r\n * nimmt die Zeit auf, wie lange der Benutzer arbeitet oder gerade Pause hat.\r\n * Dabei kann der Benutzer entscheiden bei welcher Tätigkeit er arbeiten möchte\r\n * Die Zeiten werden noch nicht richtig aufgenommen\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function RecordTimeForTask() {\r\n    const [tasks, setTasks] = useState({value: [], docIds: []});\r\n    const [index, setIndex] = useState(-1);\r\n    const [workingTime, setWorkingTime] = useState({from: new Date(), till: new Date()});\r\n    const [pause, setPause] = useState({from: new Date(), till: new Date()});\r\n\r\n    const [isOnBreak, setIsOnBreak] = useState(false);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    /**\r\n     * holt die Tätigkeiten des Benutzers und speichert auch die IDs\r\n     */\r\n    useEffect(() => {\r\n        db.collection(\"tasks\").get().then(queryShot => {\r\n            setTasks({docIds: firebaseTasks.getDocIdsFromUser(queryShot), value: firebaseTasks.getFromUser(queryShot)})\r\n        });\r\n    }, []);\r\n\r\n    /**\r\n     * startet oder stoppt den Timer und speichert die Daten in die Datenbank.\r\n     * Hier werden die Arbeitszeiten aufgenommen.\r\n     * BEARBEITEN, DATEN WERDEN KOMISCH GESPEICHERT.\r\n     */\r\n    function validateWorkTime() {\r\n        setIsActive(!isActive);\r\n        setWorkingTime({from: workingTime.from, till: new Date()});\r\n\r\n        if (!isActive) {\r\n            stopwatch.start();\r\n            timer.start();\r\n            setWorkingTime({from: new Date(), till: new Date()});\r\n        } else {\r\n            stopwatch.stop();\r\n            stopwatch.reset();\r\n            timer.stop();\r\n            timer.reset();\r\n        }\r\n        update();\r\n    }\r\n\r\n    /**\r\n     * startet oder stoppt den Timmer und speichert die Daten in die Datenbank\r\n     * Hier werden die Pausen aufgenommen.\r\n     */\r\n    function validateBreaks() {\r\n        setIsOnBreak(!isOnBreak);\r\n        stopwatch.start();\r\n        timer.start();\r\n        setPause({from: pause.from, till: new Date()});\r\n\r\n        if (!isOnBreak) {\r\n            setPause({from: new Date(), till: new Date()});\r\n            stopwatch.stop();\r\n            timer.stop();\r\n        }\r\n        update();\r\n    }\r\n\r\n    /**\r\n     * Sobald die Auswahl der Tätigkeit verändert wurde, werden die Daten wieder auf die Standartwerte gespeichert.\r\n     * @param index\r\n     */\r\n    function onSelect(index) {\r\n        stopwatch.reset();\r\n        timer.reset();\r\n        setIsActive(false);\r\n        setIndex(index);\r\n        setWorkingTime({from: new Date(), till: new Date()});\r\n        setPause({from: new Date(), till: new Date()});\r\n    }\r\n\r\n    /**\r\n     * speichert die verschiedene Zeiten in die Firestore Datenbank\r\n     * Dabei sollen die vorherigen Arbeitszeiten und Pausen nicht überschrieben.\r\n     */\r\n    function update() {\r\n        let worktime = [workingTime];\r\n        let pauses = [pause];\r\n\r\n        if (tasks.value[index].editTime.length > 0) worktime = [...tasks.value[index].editTime, workingTime];\r\n        if (tasks.value[index].pause.length > 0) pauses = [...tasks.value[index].pause, pause];\r\n\r\n        firebaseTasks.updateTask(tasks.docIds[index], tasks.value[index], worktime, pauses);\r\n    }\r\n\r\n    return (\r\n        <Container className=\"col-11 col-lg-8\">\r\n            <h3>Zeiten erfassen</h3>\r\n            <br/>\r\n            <h5>{(index < 0) ? ' ' : tasks.value[index].name}</h5>\r\n            <br/>\r\n            <hr/>\r\n\r\n            <h6>Vorhandene Zeit: </h6>\r\n            <TimerView\r\n                startValue={(index < 0) ? 0 : formatter.getDateFromHours(tasks.value[index].plannedTill) - formatter.getDateFromHours(tasks.value[index].plannedFrom)}\r\n                timer={timer}/>\r\n\r\n            <br/>\r\n            <Button onClick={validateWorkTime} variant=\"light\"\r\n                    disabled={(index < 0 || pause.isActive)}>{(isActive) ? \"Stopp\" : \"Start\"}\r\n            </Button>\r\n\r\n            <br/><br/>\r\n            <hr/>\r\n\r\n            <DropdownButton title={(index >= 0) ? formatter.showTask(tasks.value[index]) : \"Bitte etwas auswählen\"}\r\n                            variant='warning'>\r\n                {tasks.value.map(((value, index) =>\r\n                    <Dropdown.Item key={'tasks' + index}\r\n                                   onSelect={() => onSelect(index)}>{formatter.showTask(value)}</Dropdown.Item>)\r\n                )}\r\n            </DropdownButton>\r\n            <br/>\r\n\r\n            <h6>{\"angefangen: \" + ((isActive) ? formatter.formatDate(workingTime.from) : 'nicht definiert.')}</h6>\r\n            <p>berechnete Zeit:</p>\r\n            <StopwatchView stopwatch={stopwatch}/>\r\n            <br/>\r\n\r\n            <Button className={\"col-6\"} disabled={(index < 0)} onClick={validateBreaks} variant=\"light\">\r\n                {(isOnBreak) ? 'weiter' : 'pausieren'}\r\n            </Button>\r\n            <br/><br/>\r\n        </Container>\r\n    )\r\n}","import {Container, Nav, Navbar} from \"react-bootstrap\";\r\n\r\n/**\r\n * erstellt eine Vorgabe der Website.\r\n * Es ist eine Navigationbar einbegriffen und diese navigiert zu den anderen Komponenten\r\n *\r\n * @param component\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function Layout({component}) {\r\n    return (\r\n        <Container>\r\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"/schnellmenu\">Semeru</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"me-auto\">\r\n                            <Nav.Link href=\"/statistiken\">Statistiken</Nav.Link>\r\n                            <Nav.Link href=\"/tätigkeit/erfassen\">Zeiten erfassen</Nav.Link>\r\n                            <Nav.Link href=\"/tätigkeit/erstellen\">Tätigkeit erfassen</Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n            <br/>\r\n            {component}\r\n        </Container>\r\n    )\r\n}","import firebase from \"firebase\";\r\n\r\n\r\nlet db = firebase.firestore();\r\nconst collectionName = \"user\";\r\n\r\n/**\r\n * Diese Klasse greift auf die User Collection zu.\r\n * Hier werden die CRUD Methoden implementiert, damit diese mehrmals gebraucht werden können in den Komponenten.\r\n *\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default class FirebaseUsers {\r\n\r\n    /**\r\n     * erstellt einen neuen User mit den nötigen Attributen.\r\n     * @param email\r\n     * @param firstname\r\n     * @param lastname\r\n     */\r\n    create(email, firstname, lastname) {\r\n        db.collection(collectionName).doc(email).set({\r\n            firstname: firstname,\r\n            lastname: lastname\r\n\r\n        }).catch(error => alert(\"Es ist ein Fehler aufgetreten: \" + error));\r\n    }\r\n\r\n    /**\r\n     * greift auf die Daten eines User zu.\r\n     * ist noch in Bearbeitung!\r\n     * @param email\r\n     */\r\n    getAUser(email) {\r\n        db.collection(collectionName).get().then(query => {\r\n            query.forEach(doc => {\r\n                if (doc.id === email) return doc.data()\r\n            });\r\n        });\r\n    }\r\n}","import {Alert, Button, Col, Container, FloatingLabel, Form, FormControl, InputGroup, Row} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport firebase from \"firebase\";\r\nimport FirebaseUsers from \"../firebase/FirebaseUsers\";\r\n\r\n/**\r\n * Hier kann sich der Benutzer registrieren und sein Konto wird eröffnet.\r\n * Dazu muss der Benutzer seine Email-Adresse, Vor- und Nachname und Passwort angeben.\r\n * Das Passwort wird NICHT in die Collection \"user\" GESPEICHERT!\r\n * AUSSEHEN NOCH IN BEARBEITUNG\r\n *\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function SignUp(props) {\r\n    const [email, setEmail] = useState('');\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [password, setPassword] = useState({value: '', confirmPwd: ''})\r\n\r\n    const rules = [\r\n        {fn: () => firstname.length < 31, message: \"Ihr Vorname muss max. 30 Buchstaben enthalten\"},\r\n        {fn: () => firstname.length > 2, message: \"Ihr Vorname muss mind. 3 Buchstaben enthalten\"},\r\n        {fn: () => firstname.match(/\\w+/), message: \"Ihr Vorname muss Buchstaben enthalten\"},\r\n        {fn: () => lastname.length < 31, message: \"Ihr Nachname muss max. 30 Buchstaben enthalten\"},\r\n        {fn: () => lastname.match(/\\w+/), message: \"Ihr Nachname kann nur Buchstaben enthalten\"},\r\n        {fn: () => lastname.length > 2, message: \"Ihr Nachname muss mind. 3 Buchstaben enthalten\"},\r\n        {fn: () => email.match(/.+@.+\\..+/), message: \"Es wurde keine gültige E-Mail-Adresse angegeben\"},\r\n        {fn: () => password.value.length > 6, message: \"Ihres Passwort muss mind. 6 Zeichen enthalten\"},\r\n        {fn: () => password.confirmPwd === password.value, message: \"Ihre Passwörter sind nicht identisch\"}\r\n    ]\r\n\r\n    /**\r\n     * erstellt einen User und dieser kann in der Zukunft mit diesen Konto anmelden\r\n     * Dazu werden noch alle Felder validiert und falls diese nicht gültig sind, wird eine Fehlermeldung ausgegeben\r\n     */\r\n    function handleSubmit() {\r\n        const failures = rules.filter(r => !r.fn());\r\n        const firebaseCon = new FirebaseUsers();\r\n\r\n        if (failures.length) {\r\n            failures.forEach(r => alert(r.message));\r\n            return;\r\n        }\r\n\r\n        //erstellt eine Registration, damit dieser User auf diese Datenbank zugreifen kann.\r\n        firebase.auth().createUserWithEmailAndPassword(email, password.value)\r\n            .then(() => {\r\n                firebaseCon.create(email, firstname, lastname);\r\n                localStorage.setItem('email', email);\r\n                props.history.push('schnellmenu')\r\n            })\r\n            .catch(error => alert(\"Es ist ein Fehler aufgetreten: \" + error));\r\n    }\r\n\r\n    return (\r\n        <Container className=\"col-10\">\r\n            <br/>\r\n            <h3>Registrierung</h3>\r\n            <br/>\r\n\r\n            <Form>\r\n                <div className=\"form-floating mb-3\">\r\n                    <FormControl type=\"email\" id=\"email\" placeholder=\"name@example.com\" value={email}\r\n                                 onChange={e => setEmail(e.target.value)}/>\r\n                    <label htmlFor=\"email\">Email-Adresse</label>\r\n                </div>\r\n                <br/>\r\n\r\n                <div className=\"form-floating col-md col-8\">\r\n                    <FormControl type=\"text\" id=\"firstname\" placeholder=\"name@example.com\"\r\n                                 value={firstname} onChange={e => setFirstname(e.target.value)}/>\r\n                    <label htmlFor=\"firstname\">Vorname</label>\r\n                </div>\r\n                <br/>\r\n\r\n                <div className=\"form-floating col-md col-8\">\r\n                    <FormControl type=\"text\" id=\"firstname\" placeholder=\"name@example.com\"\r\n                                 value={lastname} onChange={e => setLastname(e.target.value)}/>\r\n                    <label htmlFor=\"lastname\">Nachname</label>\r\n                </div>\r\n                <br/><br/>\r\n\r\n                <div className=\"form-floating col-md\">\r\n                    <FormControl type=\"password\" id=\"firstname\" placeholder=\"name@example.com\" value={password.value}\r\n                                 onChange={e => setPassword({...password, value: e.target.value})}/>\r\n                    <label htmlFor=\"lastname\">Passwort</label>\r\n                </div>\r\n\r\n                <label htmlFor=\"password\">Passwort bestätigen</label>\r\n                <FormControl value={password.confirmPwd} type={\"password\"} id={\"confirmPassword\"}\r\n                             onChange={e => setPassword({...password, confirmPwd: e.target.value})}/>\r\n                <br/><br/>\r\n\r\n                <Button className=\"col-6\" onClick={handleSubmit}>Registrieren</Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}","import './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport SignIn from \"./components/authentication/SignIn\";\nimport Statistics from \"./components/Statistics\";\nimport FastButtonMenu from \"./components/FastButtonMenu\";\nimport CreateTask from \"./components/CreateTask\";\nimport RecordTimeForTask from \"./components/RecordTimeForTask\";\nimport Layout from \"./components/Layout\";\nimport {useEffect} from \"react\";\nimport {cleanup} from \"@testing-library/react\";\nimport SignUp from \"./components/authentication/SignUp\";\nimport firebase from \"firebase\";\nimport {Spinner} from \"react-bootstrap\";\n\n/**\n * Hauptapplikation der Website.\n *\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path=\"/\" component={Loading}/>\n                <Route path=\"/anmelden\" component={SignIn}/>\n                <Route path=\"/registrieren\" component={SignUp}/>\n                <Route path=\"/statistiken\"><Layout component={<Statistics/>}/></Route>\n                <Route path=\"/schnellmenu\"><Layout component={<FastButtonMenu/>}/></Route>\n                <Route path=\"/tätigkeit/erstellen\"><Layout component={<CreateTask/>}/></Route>\n                <Route path=\"/tätigkeit/erfassen\"><Layout component={<RecordTimeForTask/>}/></Route>\n            </Switch>\n        </div>\n    );\n}\n\n/**\n * kontrolliert, ob der Benutzer angemeldet ist oder nicht.\n * Leitet den Benutzer je nachdem zu einer anderen Seite.\n *\n * @param props\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nfunction Loading(props) {\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(user => {\n            props.history.push(user ? 'schnellmenu' : 'anmelden')\n        });\n        return () => {\n            cleanup()\n        }\n    });\n\n    return (\n        <div>\n            <Spinner animation=\"border\" variant=\"secondary\"/>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}