{"version":3,"sources":["components/firebase/FirebaseConnection.js","components/authentication/SignIn.js","components/StatisticsValues.js","components/Formatter.js","components/firebase/FirebaseTasks.js","components/Statistics.js","components/timers/StopwatchView.js","components/timers/TimerView.js","components/FastButtonMenu.js","components/Priority.js","components/CreateTask.js","components/RecordTimeForTask.js","components/Layout.js","components/firebase/FirebaseUsers.js","components/authentication/SignUp.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","SignIn","useState","password","setPassword","email","setEmail","rules","fn","match","message","length","Container","htmlFor","FormControl","value","onChange","e","target","id","type","Button","className","onClick","props","failures","filter","r","forEach","alert","FirebaseConnection","auth","signInWithEmailAndPassword","then","localStorage","set","history","push","catch","variant","href","statisticsValues","today","thisWeek","thisMonth","Formatter","date1","date2","hours","Math","floor","minutes","time","split","now","Date","getFullYear","getMonth","getDate","time1","time2","this","getDateFromHours","task","name","plannedFrom","plannedTill","date","getHours","getMinutes","db","firestore","collectionName","formatter","FirebaseTasks","priority","user","collection","doc","editTime","pause","error","queryShot","list","data","getItem","docIds","docs","docId","workTime","update","delete","conditionValue","getFromUser","stats","index","saveIndex","planned","subtractTimeInHours","convertFrom","from","toMillis","convertTill","till","returnCondition","worked","toDateString","currMonday","setDate","getDay","firebaseTasks","Statistics","setData","selectedStat","setSelectedStat","useEffect","get","getStatsFromTask","console","log","ButtonGroup","map","active","Card","Body","Title","ListGroup","Item","convertTime","rhours","round","StopwatchView","stopwatch","duration","setDuration","onTime","ms","millisToDuration","millis","seconds","TimerView","timer","startValue","Alert","isNaN","Stopwatch","require","FastButtonMenu","values","tasks","setTasks","setIndex","setWorkTime","isActive","setIsActive","activateStopwatch","ind","start","window","location","reload","newWorkTime","activeTask","updateTask","getDocIdsFromUser","showTask","prioritiy","high","normal","low","format","firebaseCon","CreateTask","setName","setPriority","setFrom","setTill","Boolean","InputGroup","Prepend","Text","calculateDifferenceDates","colorPalette","onTimeChange","hour","minute","phrases","confirm","cancel","close","pharese","Row","DropdownButton","title","Dropdown","onSelect","Priority","create","RecordTimeForTask","workingTime","setWorkingTime","setPause","isOnBreak","setIsOnBreak","worktime","pauses","reset","stop","disabled","formatDate","Layout","component","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","Link","FirebaseUsers","firstname","lastname","query","SignUp","setFirstname","setLastname","confirmPwd","Form","isValid","createUserWithEmailAndPassword","setItem","Loading","onAuthStateChanged","cleanup","Spinner","animation","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2042b8b9.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n/**\n * erstellt eine Verbindung zu der firestore Datenbank und initialiert dies auch.\n * Diese Konfiguration muss nur einmal in diesem Code programmiert werden\n *\n * @type {{storageBucket: string, apiKey: string, messagingSenderId: string, appId: string, projectId: string, measurementId: string, authDomain: string}}\n * @author Kimberly Moorhouse\n */\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB-FtRRuqWMdiV5iDHiZKfxDNQI5o64qAI\",\n    authDomain: \"semeru-52985.firebaseapp.com\",\n    projectId: \"semeru-52985\",\n    storageBucket: \"semeru-52985.appspot.com\",\n    messagingSenderId: \"1090112397950\",\n    appId: \"1:1090112397950:web:5c5937829ee10694802e2f\",\n    measurementId: \"G-FPBQ133JL7\"\n};\n\nexport default firebase.initializeApp(firebaseConfig);","import {Button, Container, FormControl} from \"react-bootstrap\";\nimport {useState} from \"react\";\nimport FirebaseConnection from \"../firebase/FirebaseConnection\";\n\n/**\n * Hier kann sich der Benutzer anmelden\n * Dazu muss der Benutzer ein gültiges Konto haben und falls dieses nicht vorhanden ist, kann er sich über den\n * Link registrieren.\n *\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function SignIn() {\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const rules = [\n        {fn: () => email.match(/.+@.+\\..+/), message: \"Es wurde keine gültige E-Mail-Adresse angegeben\"},\n        {fn: () => password.length > 6, message: \"Ihres Passwort muss mindestens 6 Zeichen enthalten\"}\n    ]\n\n    /**\n     * Hier werden die Daten validiert und es wird kontrolliert, ob dieser User auf die Datenbank zugreifen kann\n     * @param props\n     */\n    function handleSubmit(props) {\n        const failures = rules.filter(r => !r.fn());\n\n        if (failures.length) {\n            failures.forEach(r => alert(r.message));\n            return;\n        }\n\n        FirebaseConnection.auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {\n                localStorage.set('email', email);\n                props.history.push('schnellmenu')\n            })\n            .catch(() => alert(\"Ihre E-Mail Adresse stimmt nicht überein mit dem Passwort.\"));\n    }\n\n    return (\n        <Container>\n            <h2>Anmeldung</h2>\n            <br/>\n\n            <label htmlFor=\"email\">E-Mail Adresse: </label>\n            <FormControl value={email} onChange={e => setEmail(e.target.value)} id={\"email\"}/>\n            <br/>\n\n            <label htmlFor=\"password\">Passwort: </label>\n            <FormControl value={password} onChange={e => setPassword(e.target.value)} type={\"password\"}\n                         id={\"password\"}/>\n            <br/><br/>\n\n\n            <Button className=\"col-8\" onClick={handleSubmit} variant=\"secondary\">Anmelden</Button><br/><br/>\n            <a href=\"/registrieren\">Kein Konto? Melden Sie sich hier an!</a>\n        </Container>\n    )\n}","/**\n * Ein Enum, damit der Typ von der Statistik nicht verschrieben wird und dass diese auch nur die gültigen anzeigt.\n *\n * @type {{today: string, thisWeek: string, thisMonth: string}}\n * @author Kimberly Moorhouse\n */\nconst statisticsValues = {\n    today: 'Heute',\n    thisWeek: 'Diese Woche',\n    thisMonth: 'Dieser Monat'\n}\n\nexport default statisticsValues;","/**\n * Hier werden die Daten formatiert.\n * Je nachdem, was gebraucht wird, kann dies benutzt werden\n *\n * @author Kimberly Moorhouse\n */\nexport default class Formatter {\n\n    /**\n     * bekommt zwei Daten und berechnet die Differenz zwischen den zwei Daten\n     * Diese werden formatiert zurückbekommen.\n     *\n     * @param date1\n     * @param date2\n     * @returns {string} formatiert nach: 09:02\n     */\n    calculateDifferenceDates(date1, date2) {\n        let hours = Math.floor(((date1 - date2) % 86400000) / 3600000);\n        let minutes = Math.floor((((date1 - date2) % 86400000) % 3600000) / 60000);\n        return ((hours < 10) ? \"0\" : \"\") + hours + \":\" + ((minutes < 10) ? \"0\" : \"\") + minutes;\n    }\n\n    /**\n     * Formatiert eine Uhrzeit als String zu einem Datum\n     * @param time z. B. 10:50\n     * @returns {Date}\n     */\n    getDateFromHours(time) {\n        time = time.split(':');\n        let now = new Date();\n        return new Date(now.getFullYear(), now.getMonth(), now.getDate(), ...time);\n    }\n\n    /**\n     * berechnet den Unterschied zwischen zwei Uhrzeiten und gibt die Anzahl Stunden zurück\n     *\n     * @param time1 z. B. 10:50, String\n     * @param time2 z. B. 10:50, String\n     * @returns {number}\n     */\n    subtractTimeInHours(time1, time2) {\n        time1 = this.getDateFromHours(time1);\n        time2 = this.getDateFromHours(time2);\n\n        return ((time1 - time2) % 86400000) / 3600000;\n    }\n\n    showTask(task) {\n        return task.name + \" \" + task.plannedFrom + \"-\" + task.plannedTill;\n    }\n\n    /**\n     * gibt die Uhrzeit formatiert zurück (10:50)\n     * @param date\n     * @returns {string}\n     */\n    formatDate(date) {\n        return ((date.getHours() < 10) ? \"0\" : \"\") + date.getHours() + \":\" + ((date.getMinutes() < 10) ? \"0\" : \"\") + date.getMinutes();\n    }\n}","import firebase from \"firebase\";\nimport statisticsValues from \"../StatisticsValues\";\nimport Formatter from \"../Formatter\";\n\nlet db = firebase.firestore();\nconst collectionName = \"tasks\";\nconst formatter = new Formatter();\n\n/**\n * Diese Klasse greift auf die Collection tasks zu.\n * Hier werden die CRUD Methoden implementiert und können von den Komponenten aufgerufen und benutzt werden.\n *\n * @author Kimberly Moorhouse\n */\nexport default class FirebaseTasks {\n\n    /**\n     * erstellt eine neue Tätigkeit mit den nötigen Attributen\n     *\n     * @param name\n     * @param plannedFrom\n     * @param plannedTill\n     * @param priority\n     * @param user E-Mail Adresse von dem Benutzer.\n     */\n    create(name, plannedFrom, plannedTill, priority, user) {\n        db.collection(collectionName).doc().set({\n            name: name,\n            plannedFrom: plannedFrom,\n            plannedTill: plannedTill,\n            editTime: [],\n            pause: [],\n            priority: priority,\n            user: user\n\n        }).catch(error => alert(\"Ein Fehler ist aufgetreten: \" + error))\n    }\n\n    /**\n     * muss noch bearbeitet werden, vielleicht mit einem Filter?\n     *\n     * @param queryShot\n     * @returns {*[]}\n     */\n    getFromUser(queryShot) {\n        let list = [];\n\n        queryShot.forEach(doc => {\n            if (doc.data().user === localStorage.getItem('email')) list.push(doc.data())\n        });\n        return list;\n    }\n\n    /**\n     * beschafft sich die DocIDs der verschiedenen Tätigkeiten\n     * beim getFromUser werden NUR die DATEN der Tätigkeiten beschaffen und nicht die IDs!\n     *\n     * @param queryShot\n     * @returns {*[]}\n     */\n    getDocIdsFromUser(queryShot) {\n        let docIds = [];\n\n        queryShot.docs.forEach(doc => {\n            if (doc.data().user === localStorage.getItem('email')) docIds.push(doc.id)\n        });\n        return docIds;\n    }\n\n    /**\n     * Die Tätigkeit wird aktualisiert, mit den nötigen Werte\n     * alle Werte werden angegeben!\n     *\n     * @param docId\n     * @param task\n     * @param workTime\n     * @param pause\n     */\n    updateTask(docId, task, workTime, pause) {\n        db.collection(collectionName).doc(docId).update({\n            name: task.name,\n            plannedFrom: task.plannedFrom,\n            plannedTill: task.plannedTill,\n            editTime: workTime,\n            pause: pause,\n            priority: task.priority,\n            user: task.user\n\n        }).catch(error => alert(\"Ein Fehler ist aufgetreten: \" + error))\n    }\n\n    deleteATask(docId) {\n        db.collection(collectionName).doc(docId).delete().then(() => alert(\"Ihr Eintrag wurde erfolgreich gelöscht.\"))\n    }\n\n    /**\n     * beschafft die Daten für die Statistiken, die Zeiten werden hier berechnet und auch zurückgegeben\n     * Die Zeiten sind in Stunden berechnet und müssen in den Komponenten formatiert werden.\n     * NOCH IN BEARBEITUNG!!!!\n     *\n     * @param queryShot\n     * @param conditionValue: StatisticsValues\n     * @returns {*[]}: {name: '', worked: 0, pause: 0, planned: 0}\n     */\n    getStatsFromTask(queryShot, conditionValue) {\n        let data = this.getFromUser(queryShot);\n        let stats = [];\n\n\n        data.forEach((task, index) => {\n            let saveIndex = -1;\n            let workTime = 0;\n            let planned = formatter.subtractTimeInHours(task.plannedTill, task.plannedFrom)\n            let pause = 0;\n\n            task.editTime.forEach(time => {\n                const convertFrom = new Date(time.from.toMillis());\n                const convertTill = new Date(time.till.toMillis());\n\n                //sobald die Bedingung stimmt, wird die Zeit hinzugefügt.\n                if (returnCondition(conditionValue, convertTill, convertFrom)) {\n                    saveIndex = index\n                    workTime += ((convertTill - convertFrom) % 86400000) / 3600000;\n                }\n            });\n\n            task.pause.forEach(time => {\n                const convertFrom = new Date(time.from.toMillis());\n                const convertTill = new Date(time.till.toMillis());\n\n                //sobald die Bedingung stimmt, wird die Zeit hinzugefügt.\n                if (returnCondition(conditionValue, convertTill, convertFrom)) pause += ((convertTill - convertFrom) % 86400000) / 3600000;\n            })\n\n            if (saveIndex === index) stats.push({\n                name: data[index].name,\n                worked: workTime,\n                planned: planned,\n                pause: pause\n            })\n        })\n        return stats;\n    }\n}\n\n/**\n * Sobald die ConditionValue übereinstimmt, mit der Bedindung gibt dieser eine neue Bedingung zurück\n * zu dem richtigen Statistiktyp.\n *\n * @param conditionValue\n * @param till\n * @param from\n * @returns {boolean}\n */\nfunction returnCondition(conditionValue, till, from) {\n    const today = new Date().toDateString();\n    const currMonday = new Date(new Date().setDate(new Date().getDate() - new Date().getDay() + 1)).toDateString();\n\n    switch (conditionValue) {\n        case statisticsValues.today:\n            return from.toDateString() === today || till.toDateString() === today;\n        case statisticsValues.thisWeek:\n            return from.toDateString() >= currMonday || from.toDateString() <= today;\n        case statisticsValues.thisMonth:\n            return from.getMonth() === new Date().getMonth() || till.getMonth() === new Date().getMonth()\n        default:\n            return false;\n    }\n}","import {useEffect, useState} from \"react\";\r\nimport firebase from \"firebase\";\r\nimport {Button, ButtonGroup, Card, Container, ListGroup} from \"react-bootstrap\";\r\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\r\nimport statisticsValues from \"./StatisticsValues\";\r\n\r\nlet db = firebase.firestore();\r\nconst firebaseTasks = new FirebaseTasks();\r\n\r\n/**\r\n *\r\n * TODO: Formatierung der Anzahl Stunden und noch vor diese Woche muss noch implementiert werden\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function Statistics() {\r\n    const [data, setData] = useState([]);\r\n    const [selectedStat, setSelectedStat] = useState(statisticsValues.today);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"tasks\").get().then(queryShot => {\r\n            setData(firebaseTasks.getStatsFromTask(queryShot, selectedStat))\r\n            console.log(firebaseTasks.getStatsFromTask(queryShot, selectedStat))\r\n        });\r\n    }, [selectedStat]);\r\n\r\n    return (\r\n        <Container className=\"col-12 col-lg-8\">\r\n            <h3>Ihre Statistiken</h3>\r\n            <br/>\r\n\r\n            <ButtonGroup className=\"me-2\">\r\n                {[statisticsValues.today, statisticsValues.thisWeek, statisticsValues.thisMonth]\r\n                    .map(((value, index) =>\r\n                        <Button key={'stats-' + index} onClick={() => setSelectedStat(value)}\r\n                                variant=\"outline-secondary\" active={value === selectedStat}>\r\n                            {value}</Button>))}\r\n            </ButtonGroup>\r\n            <br/><br/>\r\n\r\n            {data.map(((value, index) => <div key={index}><Card>\r\n                <Card.Body>\r\n                    <Card.Title>{value.name}</Card.Title>\r\n                </Card.Body>\r\n                <ListGroup>\r\n                    <ListGroup.Item>{\"gearbeitet: \" + convertTime(value.worked)}</ListGroup.Item>\r\n                </ListGroup>\r\n            </Card><br/></div>))}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction convertTime(hours) {\r\n    const rhours = Math.floor(hours);\r\n    const minutes = (hours - rhours) * 60;\r\n    const rminutes = Math.round(minutes);\r\n    return rhours + \" h \" + rminutes + \" min\";\r\n}","import {useState} from \"react\";\n\n/**\n * Hier wird die Stoppuhr implementiert und wird momentan in zwei Komponenten gebraucht.\n * Die Formatierung muss noch erledigt werden!!\n *\n * @param stopwatch die Stoppuhr wird mitgegeben, damit im Parent diese an- oder ausschalten kann\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function StopwatchView({stopwatch}) {\n    const [duration, setDuration] = useState(0);\n    stopwatch.onTime(time => setDuration(time.ms));\n\n    return (\n        <div>\n            <h5>\n                {millisToDuration(duration)}\n            </h5>\n        </div>\n    )\n}\n\nfunction millisToDuration(millis) {\n    let hours = Math.floor(millis / 3600000 % 24);\n    let minutes = Math.floor(millis / 60000 % 60);\n    let seconds = Math.floor(millis / 1000 % 60);\n\n    hours = ((hours < 10) ? '0' : '') + hours;\n    minutes = ((minutes < 10) ? '0' : '') + minutes;\n    seconds = ((seconds < 10) ? '0' : '') + seconds;\n\n    return hours + ':' + minutes + ':' + seconds\n}","import {Alert} from \"react-bootstrap\";\nimport {useState} from \"react\";\n\n/**\n * erstellt einen Countdown-timer und sobald die Zeit vorbei ist wird eine Meldung angezeigt.\n * Das graphische Aussehen ist noch in Bearbeitung\n *\n * @param timer\n * @param startValue Zeit in Millisekunden\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function TimerView({timer, startValue}) {\n    const [duration, setDuration] = useState();\n    timer.onTime(time => setDuration(startValue - time.ms));\n\n    return (\n        <div>\n            <Alert variant='warning'>\n                <h4>{(duration === 0) ? 'Ihre eingeplante Zeit ist vorbei ' : millisToDuration(duration)}</h4>\n            </Alert>\n        </div>\n    )\n}\n\n/**\n * formatiert die Millisekunden in Stunden, Minuten und Sekunden.\n * Falls diese nicht berechnet werden können, gibt es 00:00:00 zurück.\n *\n * @param millis\n * @returns {string}\n */\nfunction millisToDuration(millis) {\n    let hours = Math.floor(millis / 3600000 % 24);\n    let minutes = Math.floor(millis / 60000 % 60);\n    let seconds = Math.floor(millis / 1000 % 60);\n\n    hours = ((hours < 10) ? '0' : '') + hours;\n    minutes = ((minutes < 10) ? '0' : '') + minutes;\n    seconds = ((seconds < 10) ? '0' : '') + seconds;\n\n    if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) return '00:00:00';\n\n    return hours + ':' + minutes + ':' + seconds;\n}","import {useEffect, useState} from \"react\";\nimport firebase from \"firebase\";\nimport {Button} from \"react-bootstrap\";\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\nimport Formatter from \"./Formatter\";\nimport StopwatchView from \"./timers/StopwatchView\";\nimport TimerView from \"./timers/TimerView\";\n\n//wird gebracht für den Timer und Stoppuhr\nlet Stopwatch = require('timer-stopwatch')\nlet stopwatch = new Stopwatch();\nlet timer = new Stopwatch();\n\nlet db = firebase.firestore();\nconst firebaseTasks = new FirebaseTasks();\nconst formatter = new Formatter();\n\n/**\n * Hier kann der Benutzer schnell seine Arbeitszeiten erfassen mit nur einem Klick.\n * Sobald er auf den Knopf drückt, werden die Arbeitszeiten aufgenommen.\n * Pausen wurden nicht implementiert, sowie auch nicht Unterbrechungen.\n *\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function FastButtonMenu() {\n    const [tasks, setTasks] = useState({values: [], docIds: []});\n    const [index, setIndex] = useState(-1);\n    const [workTime, setWorkTime] = useState({from: new Date(), till: new Date()});\n    const [isActive, setIsActive] = useState(false);\n\n    /**\n     * beschafft die Tätigkeiten des Benutzers aus der Datenbank, dabei werden auch die DocIDs gespeichert.\n     */\n    useEffect(() => {\n        db.collection(\"tasks\").get().then(queryShot => {\n            setTasks({docIds: firebaseTasks.getDocIdsFromUser(queryShot), values: firebaseTasks.getFromUser(queryShot)})\n        });\n    }, [])\n\n    /**\n     * startet oder stoppt die Stoppuhr und erfasst diese Daten in die Datenbank.\n     * @param ind\n     */\n    function activateStopwatch(ind) {\n        setIndex(ind);\n        setIsActive(!isActive);\n\n        setWorkTime({from: workTime.from, till: new Date()});\n        stopwatch.start();\n        timer.start();\n\n        if (ind === index) setIndex(-1);\n\n        if (isActive) {\n            setWorkTime({from: new Date(), till: new Date()});\n            //akutalisiert alle Daten auf ihre Standartwerte und beschafft neue Daten\n            window.location.reload()\n        }\n\n        update(ind);\n    }\n\n    /**\n     * aktualisiert die Daten in der Datenbank.\n     * Die Daten die verändert wurden, sind die Arbeitszeiten.\n     * @param ind\n     */\n    function update(ind) {\n        let newWorkTime = [workTime];\n        const activeTask = tasks.values[ind];\n\n        if (activeTask.editTime.length > 0) newWorkTime = [...activeTask.editTime, workTime];\n\n        firebaseTasks.updateTask(tasks.docIds[ind], activeTask, newWorkTime, activeTask.pause);\n    }\n\n    return (\n        <div>\n            <h3>Schnell Menu</h3>\n            <h4>{(index < 0) ? '' : tasks.values[index].name}</h4>\n            <br/>\n\n            <h6>berechnete Zeit: </h6>\n            <StopwatchView stopwatch={stopwatch}/>\n\n            <br/>\n            <h6>verfügbare Zeit:</h6>\n            <TimerView\n                startValue={(index < 0) ? 0 : formatter.getDateFromHours(tasks.values[index].plannedTill) - formatter.getDateFromHours(tasks.values[index].plannedFrom)}\n                timer={timer}/>\n            <br/>\n            <hr/>\n\n            {tasks.values.map(((value, ind) =>\n                <div key={'tasks' + ind}>\n                    <Button onClick={() => activateStopwatch(ind)} className=\"col-8\" active={ind === index}\n                            variant=\"outline-secondary\">\n                        {formatter.showTask(value)}\n                    </Button><br/><br/>\n                </div>))}\n\n        </div>\n    )\n}","/**\n * Ist ein Enum für die Priorität, damit werden Tippfehler verringert.\n *\n * @type {{normal: string, high: string, low: string}}\n * @author Kimberly Moorhouse\n */\nconst prioritiy = {\n    high: 'hoch',\n    normal: 'normal',\n    low: 'tief'\n}\n\nexport default prioritiy;","import {Container, DropdownButton, Dropdown, FormControl, Button, InputGroup, Row, Alert} from \"react-bootstrap\";\nimport {useState} from \"react\";\nimport TimePicker from 'react-times';\nimport 'react-times/css/material/default.css';\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\nimport Formatter from \"./Formatter\";\nimport Priority from \"./Priority\";\n\nconst format = new Formatter();\nconst firebaseCon = new FirebaseTasks();\n\n/**\n * Auf der Website kann hier eine neue Tätigkeit hinzugefügt werden.\n * Der User wird mitgegeben über den Localstorage\n * Natürlich werden die Daten validiert und geben eine Fehlermeldung aus.\n *\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function CreateTask() {\n    const [name, setName] = useState('');\n    const [priority, setPriority] = useState('');\n    const [from, setFrom] = useState('');\n    const [till, setTill] = useState('');\n\n    const rules = [\n        {fn: () => name.length < 31, message: \"Die Tätigkeit muss max. 30 Buchstaben enthalten\"},\n        {fn: () => Boolean(priority), message: \"Sie müssen eine Priorität setzen\"},\n        {fn: () => Boolean(from), message: \"Sie müssen eine Startzeit setzen\"},\n        {fn: () => Boolean(till), message: \"Sie müssen eine Endzeit setzen\"},\n        {fn: () => name.length > 2, message: \"Die Tätigkeit muss mind. 3 Buchstaben enthalten\"}\n    ];\n\n    /**\n     * kontrolliert, ob die Daten stimmen. Falls diese stimmen werden diese in die Firestore Datenbank gespeichert und\n     * die Werte werden aktuallisiert.\n     * Falls diese nicht stimmen, bekommt der User eine Fehlermeldung, bei dem was nicht stimme\n     */\n    function handleSubmit() {\n        const failures = rules.filter(r => !r.fn());\n\n        if (failures.length) {\n            failures.forEach(r => alert(r.message));\n            return;\n        }\n\n        //erstellt eine neue Tätigkeit\n        firebaseCon.create(name, from, till, priority, localStorage.getItem('email'));\n\n        setName('');\n        setFrom('');\n        setTill('');\n        setPriority('');\n    }\n\n    return (\n        <Container className=\"col-10 col-lg-8\">\n            <h3>Tätigkeit erfassen</h3>\n            <br/>\n\n            <InputGroup>\n                <InputGroup.Prepend className={\"col-4 col-lg-3\"}>\n                    <InputGroup.Text>Tätigkeit</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={name} onChange={e => setName(e.target.value)} id={\"name\"}/>\n            </InputGroup>\n            <br/>\n\n            <hr/>\n            <h5>{(Boolean(from) && Boolean(till)) ? \"dauer: \" +\n                format.calculateDifferenceDates(format.getDateFromHours(till), format.getDateFromHours(from)) : ''}</h5>\n\n            <Alert variant=\"warning\">\n                <label>Von: </label>\n                <TimePicker colorPalette=\"dark\" onTimeChange={time => setFrom(time.hour + \":\" + time.minute)}\n                            time={from}\n                            phrases={{confirm: 'Sind Sie sicher?', cancel: 'abbrechen?', close: 'schliessen'}}/>\n\n                <br/><br/>\n                <label>Bis: </label>\n                <TimePicker colorPalette=\"dark\" onTimeChange={time => setTill(time.hour + \":\" + time.minute)}\n                            time={till}\n                            pharese={{confirm: 'Sind Sie sicher?', cancel: 'abbrechen?', close: 'schliessen'}}/>\n            </Alert>\n\n            <hr/>\n            <br/>\n\n            <Row>\n                <label className=\"col-4 col-lg-3 offset-lg-2\">Priorität: </label>\n                <DropdownButton id=\"dropdown-basic-button\" className=\"col-3\" variant=\"light\"\n                                title={(Boolean(priority)) ? priority : 'Bitte etwas auswählen'}>\n                    <Dropdown.Item onSelect={() => setPriority(Priority.high)}>hoch</Dropdown.Item>\n                    <Dropdown.Item onSelect={() => setPriority(Priority.normal)}>normal</Dropdown.Item>\n                    <Dropdown.Item onSelect={() => setPriority(Priority.low)}>niedrig</Dropdown.Item>\n                </DropdownButton>\n            </Row>\n\n            <br/><br/>\n            <Button onClick={handleSubmit} className=\"col-5\" variant=\"secondary\">speichern</Button>\n        </Container>\n    )\n}","import {useEffect, useState} from \"react\";\nimport {Button, Container, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport firebase from \"firebase\";\nimport FirebaseTasks from \"./firebase/FirebaseTasks\";\nimport Formatter from \"./Formatter\";\nimport StopwatchView from \"./timers/StopwatchView\";\nimport TimerView from \"./timers/TimerView\";\n\n\n//werden für den Timer und auch für die Stoppuhr gebraucht.\nlet Stopwatch = require('timer-stopwatch')\nlet stopwatch = new Stopwatch();\nlet timer = new Stopwatch();\n\nlet db = firebase.firestore();\nconst firebaseTasks = new FirebaseTasks();\nconst formatter = new Formatter();\n\n/**\n * nimmt die Zeit auf, wie lange der Benutzer arbeitet oder gerade Pause hat.\n * Dabei kann der Benutzer entscheiden bei welcher Tätigkeit er arbeiten möchte\n * Die Zeiten werden noch nicht richtig aufgenommen\n *\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function RecordTimeForTask() {\n    const [tasks, setTasks] = useState({value: [], docIds: []});\n    const [index, setIndex] = useState(-1);\n    const [workingTime, setWorkingTime] = useState({from: new Date(), till: new Date()});\n    const [pause, setPause] = useState({from: new Date(), till: new Date()});\n\n    const [isOnBreak, setIsOnBreak] = useState(false);\n    const [isActive, setIsActive] = useState(false);\n\n    /**\n     * holt die Tätigkeiten des Benutzers und speichert auch die IDs\n     */\n    useEffect(() => {\n        db.collection(\"tasks\").get().then(queryShot => {\n            setTasks({docIds: firebaseTasks.getDocIdsFromUser(queryShot), value: firebaseTasks.getFromUser(queryShot)})\n        });\n    }, []);\n\n    /**\n     * startet oder stoppt den Timer und speichert die Daten in die Datenbank.\n     * Hier werden die Arbeitszeiten aufgenommen.\n     * BEARBEITEN, DATEN WERDEN KOMISCH GESPEICHERT.\n     */\n    function validateWorkTime() {\n        setIsActive(!isActive);\n        setWorkingTime({from: workingTime.from, till: new Date()});\n\n        if (!isActive) {\n            stopwatch.start();\n            timer.start();\n            setWorkingTime({from: new Date(), till: new Date()});\n        } else {\n            stopwatch.stop();\n            stopwatch.reset();\n            timer.stop();\n            timer.reset();\n        }\n        update();\n    }\n\n    /**\n     * startet oder stoppt den Timmer und speichert die Daten in die Datenbank\n     * Hier werden die Pausen aufgenommen.\n     */\n    function validateBreaks() {\n        setIsOnBreak(!isOnBreak);\n        stopwatch.start();\n        timer.start();\n        setPause({from: pause.from, till: new Date()});\n\n        if (!isOnBreak) {\n            setPause({from: new Date(), till: new Date()});\n            stopwatch.stop();\n            timer.stop();\n        }\n        update();\n    }\n\n    /**\n     * Sobald die Auswahl der Tätigkeit verändert wurde, werden die Daten wieder auf die Standartwerte gespeichert.\n     * @param index\n     */\n    function onSelect(index) {\n        stopwatch.reset();\n        timer.reset();\n        setIsActive(false);\n        setIndex(index);\n        setWorkingTime({from: new Date(), till: new Date()});\n        setPause({from: new Date(), till: new Date()});\n    }\n\n    /**\n     * speichert die verschiedene Zeiten in die Firestore Datenbank\n     * Dabei sollen die vorherigen Arbeitszeiten und Pausen nicht überschrieben.\n     */\n    function update() {\n        let worktime = [workingTime];\n        let pauses = [pause];\n\n        if (tasks.value[index].editTime.length > 0) worktime = [...tasks.value[index].editTime, workingTime];\n        if (tasks.value[index].pause.length > 0) pauses = [...tasks.value[index].pause, pause];\n\n        firebaseTasks.updateTask(tasks.docIds[index], tasks.value[index], worktime, pauses);\n    }\n\n    return (\n        <Container className=\"col-11 col-lg-8\">\n            <h3>Zeiten erfassen</h3>\n            <br/>\n\n            <DropdownButton title={(index >= 0) ? formatter.showTask(tasks.value[index]) : \"Bitte etwas auswählen\"}\n                            variant='warning'>\n                {tasks.value.map(((value, index) =>\n                    <Dropdown.Item key={'tasks' + index}\n                                   onSelect={() => onSelect(index)}>{formatter.showTask(value)}</Dropdown.Item>)\n                )}\n            </DropdownButton>\n            <br/><hr/>\n\n            <h6>Vorhandene Zeit: </h6>\n            <TimerView\n                startValue={(index < 0) ? 0 : formatter.getDateFromHours(tasks.value[index].plannedTill) - formatter.getDateFromHours(tasks.value[index].plannedFrom)}\n                timer={timer}/>\n\n            <br/>\n            <Button onClick={validateWorkTime} variant=\"light\"\n                    disabled={(index < 0 || pause.isActive)}>{(isActive) ? \"Stopp\" : \"Start\"}\n            </Button>\n\n            <br/><br/>\n            <hr/>\n\n            <h6>{\"angefangen: \" + ((isActive) ? formatter.formatDate(workingTime.from) : 'nicht definiert.')}</h6>\n            <p>berechnete Zeit:</p>\n            <StopwatchView stopwatch={stopwatch}/>\n            <br/>\n\n            <Button className={\"col-6\"} disabled={(index < 0)} onClick={validateBreaks} variant=\"light\">\n                {(isOnBreak) ? 'weiter' : 'pausieren'}\n            </Button>\n            <br/><br/>\n        </Container>\n    )\n}","import {Container, Nav, Navbar} from \"react-bootstrap\";\n\n/**\n * erstellt eine Vorgabe der Website.\n * Es ist eine Navigationbar einbegriffen und diese navigiert zu den anderen Komponenten\n *\n * @param component\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nexport default function Layout({component}) {\n    return (\n        <Container>\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"/schnellmenu\">Semeru</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"me-auto\">\n                            <Nav.Link href=\"/statistiken\">Statistiken</Nav.Link>\n                            <Nav.Link href=\"/tätigkeit/erfassen\">Zeiten erfassen</Nav.Link>\n                            <Nav.Link href=\"/tätigkeit/erstellen\">Tätigkeit erfassen</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n            <br/>\n            {component}\n        </Container>\n    )\n}","import firebase from \"firebase\";\n\n\nlet db = firebase.firestore();\nconst collectionName = \"user\";\n\n/**\n * Diese Klasse greift auf die User Collection zu.\n * Hier werden die CRUD Methoden implementiert, damit diese mehrmals gebraucht werden können in den Komponenten.\n *\n * @author Kimberly Moorhouse\n */\nexport default class FirebaseUsers {\n\n    /**\n     * erstellt einen neuen User mit den nötigen Attributen.\n     * @param email\n     * @param firstname\n     * @param lastname\n     */\n    create(email, firstname, lastname) {\n        db.collection(collectionName).doc(email).set({\n            firstname: firstname,\n            lastname: lastname\n\n        }).catch(error => alert(\"Es ist ein Fehler aufgetreten: \" + error));\n    }\n\n    /**\n     * greift auf die Daten eines User zu.\n     * ist noch in Bearbeitung!\n     * @param email\n     */\n    getAUser(email) {\n        db.collection(collectionName).get().then(query => {\n            query.forEach(doc => {\n                if (doc.id === email) return doc.data()\n            });\n        });\n    }\n}","import {Button, Container, Form, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport firebase from \"firebase\";\r\nimport FirebaseUsers from \"../firebase/FirebaseUsers\";\r\n\r\n/**\r\n * Hier kann sich der Benutzer registrieren und sein Konto wird eröffnet.\r\n * Dazu muss der Benutzer seine Email-Adresse, Vor- und Nachname und Passwort angeben.\r\n * Das Passwort wird NICHT in die Collection \"user\" GESPEICHERT!\r\n * TODO: AUSSEHEN NOCH IN BEARBEITUNG\r\n *\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n * @author Kimberly Moorhouse\r\n */\r\nexport default function SignUp(props) {\r\n    const [email, setEmail] = useState('');\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [password, setPassword] = useState({value: '', confirmPwd: ''})\r\n\r\n    const rules = [\r\n        {fn: () => firstname.length < 31, message: \"Ihr Vorname muss max. 30 Buchstaben enthalten\"},\r\n        {fn: () => firstname.length > 2, message: \"Ihr Vorname muss mind. 3 Buchstaben enthalten\"},\r\n        {fn: () => firstname.match(/\\w+/), message: \"Ihr Vorname muss Buchstaben enthalten\"},\r\n        {fn: () => lastname.length < 31, message: \"Ihr Nachname muss max. 30 Buchstaben enthalten\"},\r\n        {fn: () => lastname.match(/\\w+/), message: \"Ihr Nachname kann nur Buchstaben enthalten\"},\r\n        {fn: () => lastname.length > 2, message: \"Ihr Nachname muss mind. 3 Buchstaben enthalten\"},\r\n        {fn: () => email.match(/.+@.+\\..+/), message: \"Es wurde keine gültige E-Mail-Adresse angegeben\"},\r\n        {fn: () => password.value.length > 6, message: \"Ihres Passwort muss mind. 6 Zeichen enthalten\"},\r\n        {fn: () => password.confirmPwd === password.value, message: \"Ihre Passwörter sind nicht identisch\"}\r\n    ]\r\n\r\n    /**\r\n     * erstellt einen User und dieser kann in der Zukunft mit diesen Konto anmelden\r\n     * Dazu werden noch alle Felder validiert und falls diese nicht gültig sind, wird eine Fehlermeldung ausgegeben\r\n     */\r\n    function handleSubmit() {\r\n        const failures = rules.filter(r => !r.fn());\r\n        const firebaseCon = new FirebaseUsers();\r\n\r\n        if (failures.length) {\r\n            failures.forEach(r => alert(r.message));\r\n            return;\r\n        }\r\n\r\n        //erstellt eine Registration, damit dieser User auf diese Datenbank zugreifen kann.\r\n        firebase.auth().createUserWithEmailAndPassword(email, password.value)\r\n            .then(() => {\r\n                firebaseCon.create(email, firstname, lastname);\r\n                localStorage.setItem('email', email);\r\n                props.history.push('schnellmenu')\r\n            })\r\n            .catch(error => alert(\"Es ist ein Fehler aufgetreten: \" + error));\r\n    }\r\n\r\n    return (\r\n        <Container className={\"col-10\"}>\r\n            <h3>Registrieren</h3>\r\n            <br/>\r\n\r\n            <Form>\r\n                <InputGroup>\r\n                    <InputGroup.Prepend\r\n                        className={\"col-4\"}><InputGroup.Text>E-Mail</InputGroup.Text></InputGroup.Prepend>\r\n                    <FormControl value={email} type={\"e-mail\"} onChange={e => setEmail(e.target.value)}\r\n                                 isValid={email.match(/.+@.+\\..+/)}/>\r\n                </InputGroup>\r\n                <br/>\r\n\r\n                <InputGroup>\r\n                    <InputGroup.Prepend\r\n                        className={\"col-4\"}><InputGroup.Text>Vorname</InputGroup.Text></InputGroup.Prepend>\r\n                    <FormControl value={firstname} onChange={e => setFirstname(e.target.value)}/>\r\n                </InputGroup>\r\n                <br/>\r\n\r\n                <label htmlFor=\"lastname\">Nachname</label>\r\n                <FormControl value={lastname} id=\"lastname\" onChange={e => setLastname(e.target.value)}/>\r\n                <br/>\r\n\r\n                <label htmlFor=\"password\">Passwort</label>\r\n                <FormControl value={password.value} onChange={e => setPassword({...password, value: e.target.value})}\r\n                             type={\"password\"} id={\"password\"}/>\r\n                <br/>\r\n\r\n                <label htmlFor=\"password\">Passwort bestätigen</label>\r\n                <FormControl value={password.confirmPwd} type={\"password\"} id={\"confirmPassword\"}\r\n                             onChange={e => setPassword({...password, confirmPwd: e.target.value})}/>\r\n                <br/><br/>\r\n\r\n                <Button className=\"col-4\" onClick={handleSubmit}>Registrieren</Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}","import './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport SignIn from \"./components/authentication/SignIn\";\nimport Statistics from \"./components/Statistics\";\nimport FastButtonMenu from \"./components/FastButtonMenu\";\nimport CreateTask from \"./components/CreateTask\";\nimport RecordTimeForTask from \"./components/RecordTimeForTask\";\nimport Layout from \"./components/Layout\";\nimport {useEffect} from \"react\";\nimport {cleanup} from \"@testing-library/react\";\nimport SignUp from \"./components/authentication/SignUp\";\nimport firebase from \"firebase\";\nimport {Spinner} from \"react-bootstrap\";\n\n/**\n * Hauptapplikation der Website.\n *\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path=\"/\" component={Loading}/>\n                <Route path=\"/anmelden\" component={SignIn}/>\n                <Route path=\"/registrieren\" component={SignUp}/>\n                <Route path=\"/statistiken\"><Layout component={<Statistics/>}/></Route>\n                <Route path=\"/schnellmenu\"><Layout component={<FastButtonMenu/>}/></Route>\n                <Route path=\"/tätigkeit/erstellen\"><Layout component={<CreateTask/>}/></Route>\n                <Route path=\"/tätigkeit/erfassen\"><Layout component={<RecordTimeForTask/>}/></Route>\n            </Switch>\n        </div>\n    );\n}\n\n/**\n * kontrolliert, ob der Benutzer angemeldet ist oder nicht.\n * Leitet den Benutzer je nachdem zu einer anderen Seite.\n *\n * @param props\n * @returns {JSX.Element}\n * @constructor\n * @author Kimberly Moorhouse\n */\nfunction Loading(props) {\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(user => {\n            props.history.push(user ? 'schnellmenu' : 'anmelden')\n        });\n        return () => {\n            cleanup()\n        }\n    });\n\n    return (\n        <div>\n            <Spinner animation=\"border\" variant=\"secondary\"/>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}